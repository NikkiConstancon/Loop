/**
 * @file
 * Test the database singleton patient manager
 *
 * @notice logging  is turned off to avid collision with mocha test output
 **/

var chai = require('chai');
var expect = chai.expect;
var assert = chai.assert;

var uuidv1 = require('uuid/v1')

var dbMan = require('../databaseManager');
var PatientManager = require('../patientManager');

var mailer = require('../lib/mailer')

//ENCRYPTION:
var CryptoJS = require("crypto-js");

var patientKey = "xP{}Lk.x#3V2S?F2p'q{kqd[Qu{7/S-d*bzt"
var accessKey = "4]),`~>{CKjv(E@'d:udH6N@/G4n(}4dn]Mi"
 

/*EXAMPLE USE
// Encrypt 
var ciphertext = CryptoJS.AES.encrypt('my message', 'secret key 123');

// Decrypt 
var bytes  = CryptoJS.AES.decrypt(ciphertext.toString(), 'secret key 123');
var plaintext = bytes.toString(CryptoJS.enc.Utf8);
console.log(plaintext);
*/

/*TABLE STRUCTURE:
module.exports = {
    fields:{
        Username    : "text",           
        Password    :{  ----> stored as key-value pairs --> as generated by crypto-js
            type: "map",
            typeDef: "<varchar, text>"
        },
        AccessPassword: {    ----> stored as key-value pairs --> as generated by crypto-js
            type: "map",
            typeDef: "<varchar, text>"
        },
        SubscriberList : {      ---> just an ordered array of emails
            type: "set",
            typeDef: "<text>"
        }, 
        Email     : "text",  
        Address     : "text", 
        Age     : "int",    
        Weight     : "int",
        Height     : "int",
        Reason     : "text" 
    },
    key:["Username"]        
}
*/

var userName = 'Patient'

describe('PatientManager', function () {
    describe('database CRUD', function () {
        describe('#addPatient', function () {
            it('adds a patient to the db', function () {
                return PatientManager
                    .addPatient({ 
                        Username: userName,
                        Password: CryptoJS.AES.encrypt('Password', patientKey).toString(),
                        AccessPassword: CryptoJS.AES.encrypt('AccessPassword', accessKey).toString(),
                        SubscriberList : ['g@g.com'],
                        Email : "testPatient@test.co.za", 
                        Address : '42 Dale Avenue Hempton 1765',
                        Age : 42, 
                        Weight : 23,
                        Height : 32, 
                        Reason : 'Disability'})
                    .then((_patient) => {
                        if(_patient != null){
                            expect(_patient.Username).to.equal(userName);
                            expect(typeof _patient.Password).to.equal('string');
                            expect(typeof _patient.AccessPassword).to.equal('string');
                            expect(typeof _patient.SubscriberList).to.equal('object');
                            expect(_patient.Email).to.equal("testPatient@test.co.za");
                            expect(_patient.Address).to.equal('42 Dale Avenue Hempton 1765');
                            expect(_patient.Age).to.equal(42);
                            expect(_patient.Weight).to.equal(23);
                            expect(_patient.Height).to.equal(32);
                            expect(_patient.Reason).to.equal('Disability');
                        }
                    })
            })
        })

        describe("#checkUsernameExists", function () {
            it("username is already in use", function () {
                return PatientManager
                    .checkUsernameExists(userName)
                    .then((user) => {
                        expect(user).to.equal(true);
                    })
            })
            it("username is not in use", function () {
                return PatientManager
                    .checkUsernameExists("no-One")
                    .then((user) => {
                        expect(user).to.equal(false);
                    })
            })
        })

        describe("#getPatient", function () {
            it("gets a user from the db", function () {
                return PatientManager
                    .getPatient({Username : userName})
                    .then((user) => {
                        expect(user.Username).to.equal(userName);
                    })
            })
        })
    })
    describe('Email validation', function () {
        var poll = function () {
            return PatientManager.getPatient({ Username: userName }).then(function (pat) {
                if (pat) {
                    if (pat.RegistrationObject.c !== 'sending') {
                        var check = (pat.RegistrationObject.c !== 'registered')
                        return PatientManager.validateEmail(pat.RegistrationObject.k1, pat.RegistrationObject.k2).then(function (pat) {
                            return PatientManager.getPatient({ Username: userName }).then(function (pat) {
                                if (check) {
                                    expect(pat.RegistrationObject.c).to.equal('registered')
                                    expect(pat.RegistrationObject.k1).to.equal(undefined)
                                    expect(pat.RegistrationObject.k2).to.equal(undefined)
                                } else {
                                    assert(false, 'ALREADY REGISTERED')
                                }
                            })
                        })
                    } else {
                        return new Promise(function (res, rej) {
                            setTimeout(function () { res() }, 1000)
                        }).then(poll);
                    }
                } else {
                    assert(false, 'could not get patient to send email')
                }
            })
        }
        it('test transition from <sending> to <awaiting> lastly <registered>', poll).timeout(12000)
    })
})